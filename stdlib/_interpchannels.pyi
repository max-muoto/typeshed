from __future__ import annotations

from _typeshed import structseq
from typing import Any, Final, Literal, Self, TypeAlias, TypeVar, final

_T = TypeVar("_T")
_SendTypes: TypeAlias = Literal["send", "recv", "both"]

@final
class ChannelID:
    @property
    def end(self) -> _SendTypes: ...
    @property
    def send(self) -> Self: ...
    @property
    def recv(self) -> Self: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

@final
class ChannelInfo(structseq[Any], tuple[bool, bool, bool, int, int, int, int, int]):
    __match_args__: Final = (
        "open",
        "closing",
        "closed",
        "count",
        "num_interp_send",
        "num_interp_send_released",
        "num_interp_recv",
        "num_interp_recv_released",
    )
    open: bool
    closing: bool
    closed: bool
    count: int
    num_interp_send: int
    num_interp_send_released: int
    num_interp_recv: int
    num_interp_recv_released: int
    num_interp_both: int
    num_interp_both_recv_released: int
    num_interp_both_send_released: int
    num_interp_both_released: int
    recv_associated: bool
    recv_released: bool
    send_associated: bool
    send_released: bool

def create() -> ChannelID: ...
def destroy(cid: int) -> None: ...
def list_all() -> list[int]: ...
def list_interpreters(cid: int, send: bool = False) -> list[int]: ...
def send(cid: int, obj: object, blocking: bool = True) -> None: ...
def send_buffer(cid: int, obj: object, blocking: bool = True, timeout: float | None = None) -> None: ...
def recv(cid: int, default: _T | None = None) -> object | _T: ...
def release(cid: int, send: bool = False, recv: bool = False, force: bool = False) -> None: ...
def get_info(cid: int) -> ChannelInfo: ...
