import types
from typing import Callable, TypeVar

_T = TypeVar("_T")

# @final
# class Interpreter:
#     @property
#     def id(self) -> int: ...
#     def is_running(self) -> bool: ...
#     def close(self) -> None: ...
#     def get_main_attr(self, name: str, default: _T | None = None) -> object | _T: ...
#     def exec(self, src_str: str, /) -> None: ...

def list_all() -> list[int]: ...
def get_current() -> int: ...
def get_main() -> int: ...
def create() -> int: ...
def run_string(id: int, script: str, shared: object | None = None, *, restricted: bool = False) -> None: ...
def run_func(id: int, func: Callable[..., object], shared: object | None = None, *, restricted: bool = False) -> None: ...
def is_shareable(obj: object) -> bool: ...
def capture_exception(exc: BaseException | None = None) -> types.SimpleNamespace: ...
def whence(id: int) -> int: ...
def get_config(id: int, *, restrict: bool = False) -> types.SimpleNamespace: ...
def is_running(id: int, *, restrict: bool = False) -> bool: ...
